@model AvailableSlotsFormModel

<h5 class="text-center title-message">Available Slots for @Model.Date</h5>

<form id="bookingForm" asp-action="MakeAppointment" method="post">
    <div class="row">
        @if (Model.Slots != null && Model.Slots.Any())
        {
            foreach (var slot in Model.Slots)
            {
                if (!slot.IsBooked)
                {
                    <div class="col-sm-3">
                        <div class="card day-card mb-3">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <p class="mb-0">@($"{slot.StartTime.ToString(TimeFormat)} - {slot.EndTime.ToString(TimeFormat)}")</p>
                                    <button type="button" class="btn btn-success"
                                            style="color:#FF8C00; background-color:#273E51;"
                                            onmouseover="this.style.backgroundColor='#FF8C00'; this.style.color='#273E51';"
                                            onmouseout="this.style.backgroundColor='#273E51'; this.style.color='#FF8C00';"
                                            onclick="bookSlot('@slot.StartTime', '@slot.EndTime', @Model.BusinessId, '@Model.Date.ToString(DateFormat)')">
                                        Book
                                    </button>
                                </div>
                                <div class="form-check mb-2">
                                    <input type="checkbox" class="form-check-input reason-checkbox" onclick="ShowReasonOfBooking(this, '@slot.StartTime')" />
                                    <label class="form-check-label">Reason of booking</label>
                                </div>
                                <div class="mb-2 reason-textarea" style="display:none">
                                    <textarea name="VisitMessage" class="form-control" id="visitMessage-@Model.BusinessId" rows="2" placeholder="Describe your reason..." style="resize: none;"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        }
        else
        {
            <p>No available slots for @Model.Date.</p>
        }
    </div>
</form>

<script>
    function ShowReasonOfBooking(checkbox, slotStartTime) {
        const reasonBookingDiv = checkbox.closest('.card-body').querySelector('.reason-textarea');
        const textarea = reasonBookingDiv.querySelector('textarea');

        reasonBookingDiv.style.display = checkbox.checked ? 'block' : 'none';

        if (checkbox.checked) {
            textarea.setAttribute('required', 'required');
        } else {
            textarea.removeAttribute('required');
        }
    }

    function bookSlot(slotStartTime, slotEndTime, businessId, date) {
        const visitMessageElement = document.querySelector(`#visitMessage-${businessId}`);
        const visitMessage = visitMessageElement ? visitMessageElement.value : '';
        const formattedDate = date;

        const model = {
            BusinessId: businessId,
            VisitMessage: visitMessage,
            Date: formattedDate,
            StartTime: slotStartTime,
            EndTime: slotEndTime,
        };

        const fetchUrl = '/UserArea/Appointment/MakeAppointment';

        const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
        const token = tokenInput ? tokenInput.value : '';
        if (!token) {
            console.error('Request verification token is not available.');
            return;
        }

        fetch(fetchUrl, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                "RequestVerificationToken": token
            },
            body: JSON.stringify(model)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.statusText);
                }
                return response.text();
            })
            .then(html => {
                document.getElementById('availableSlots').innerHTML = html; // Update this to your target element for slots
            })
            .catch(error => console.error('Error fetching slots:', error));
    }
</script>



@* @model AvailableSlotsFormModel

<h3 class="text-center mb-3">Available Slots for @Model.Date</h3>

<form id="bookingForm" asp-action="MakeAppointment" method="post">
    <div class="row">
        <h2>@Model.BusinessId</h2>
        @if (Model.Slots != null && Model.Slots.Any())
        {
            foreach (var slot in Model.Slots)
            {
                if (slot.IsBooked == false)
                {
                    <div class="col-md-3 mb-3" style="background-color:white;">
                        <div class="border p-3 rounded shadow-lg">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <p class="mb-0">@($"{slot.StartTime.ToString(TimeFormat)} - {slot.EndTime.ToString(TimeFormat)}")</p>
                                <button type="button" class="btn btn-success"
                                        style="color:#FF8C00; background-color:#273E51;"
                                        onmouseover="this.style.backgroundColor='#FF8C00'; this.style.color='#273E51';"
                                        onmouseout="this.style.backgroundColor='#273E51'; this.style.color='#FF8C00';"
                                        onclick="bookSlot('@slot.StartTime', '@slot.EndTime', @Model.BusinessId, '@Model.Date.ToString(DateFormat)')">
                                    Book
                                </button>
                            </div>
                            <div class="form-check mb-2">
                                <input type="checkbox" class="form-check-input reason-checkbox" onclick="ShowReasonOfBooking(this, '@slot.StartTime')" />
                                <label class="form-check-label">Reason of booking</label>
                            </div>
                            <div class="mb-2 reason-textarea" style="display:none">
                                <textarea name="VisitMessage" class="form-control" id="visitMessage-@Model.BusinessId" rows="2" placeholder="Describe your reason..." style="resize: none;"></textarea>

                            </div>
                        </div>
                    </div>
                }
            }
        }
        else
        {
            <p>No available slots for @Model.Date.</p>
        }
    </div>
</form>

<script>
    function ShowReasonOfBooking(checkbox, slotStartTime) {
        const reasonBookingDiv = checkbox.closest('.border').querySelector('.reason-textarea');
        const textarea = reasonBookingDiv.querySelector('textarea');

        reasonBookingDiv.style.display = checkbox.checked ? 'block' : 'none';

        if (checkbox.checked) {
            textarea.setAttribute('required', 'required');
        } else {
            textarea.removeAttribute('required');
        }
    }

    function bookSlot(event, slotStartTime, slotEndTime, businessId, date, slots) {
        event.preventDefault();
        const visitMessageElement = document.querySelector(`#visitMessage-${businessId}`);
        const visitMessage = visitMessageElement ? visitMessageElement.value : '';
        const formattedDate = date;
        console.log(date);
        
        const model = {
            BusinessId: businessId,
            VisitMessage: visitMessage,
            Date: formattedDate,
            StartTime: slotStartTime,
            EndTime: slotEndTime,
        };
        console.log("Model to send:", model);

        const fetchUrl = '/UserArea/Appointment/MakeAppointment';

        const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
        const token = tokenInput ? tokenInput.value : '';
        if (!token) {
            console.error('Request verification token is not available.');
            return;
        }
        console.log("token to send:", token);
        fetch(fetchUrl, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                "RequestVerificationToken": token
            },
            body: JSON.stringify(model)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.statusText);
                }
                return response.text();
            })
            .then(html => {
                document.getElementById('availableSlots').innerHTML = html; // Update this to your target element for slots
            })
            .catch(error => console.error('Error fetching slots:', error));
    }
</script>



 *@