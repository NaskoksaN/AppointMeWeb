@model AppointmentViewModel


    @{
        ViewData["Title"] = "Book Your Appointment in the Coming 30 Days";
        var tempDate = DateOnly.FromDateTime(DateTime.Now.AddDays(4)); // This is of type DateOnly
    }

    <div class="container mt-4">
        <h2 class="mb-4 text-center">@ViewData["Title"]</h2>

        <div class="row d-flex align-items-stretch">
            @foreach (var date in Model.NextThirtyDays)
            {
                var workingTime = Model.WorkingHours[date];
                var tooltipText = Model.TooltipTexts[date];

                <div class="col-md-2 mb-2 d-flex">
                    <a href="javascript:void(0);" class="btn btn-primary btn-block select-date"
                       data-date="@date.ToString("yyyy-MM-dd")"
                       data-businessid="@Model.BusinessId"
                       title="@($"{workingTime} {tooltipText}")"
                       data-toggle="tooltip"
                       data-placement="top">
                        @date.ToString("dddd, MMM dd yyyy")
                    </a>
                </div>
            }
        </div>

        <div class="book-slot mt-5">
            <form asp-area="UserArea" asp-controller="Appointment" asp-action="GetSlots" method="post">
                <div id="slotContainer" class="mt-5">
                    <input type="hidden" name="BusinessId" value="@Model.BusinessId" />
                    <input type="hidden" name="Date" value="@tempDate.ToString("yyyy-MM-dd")" /> <!-- This line is correct for hidden input -->
                    <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryToken()">
                    <div id="availableSlots">
                      
                    <partial name="_AvailableSlots" model="new AvailableSlotsViewModel() { BusinessId = Model.BusinessId, Date = tempDate, Slots=Model.AvailableSlots[tempDate] }" />
                    </div>
                </div>
            </form>
        </div>
    </div>


<style>
    .tooltip {
        /* max-width: 40ch;  */
        padding: 8px; 
        font-size: 16px; 
    }

    .tooltip-inner {
        max-width: 35ch;
        /* background-color: #333; /* Tooltip background color */
        color: #fff; 
        border-radius: 4px; /* Optional: add border radius */
        line-height: 1.4;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {

        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-toggle="tooltip"]'));
        tooltipTriggerList.forEach(function (tooltipTriggerEl) {
            new bootstrap.Tooltip(tooltipTriggerEl);
        });

        var availableSlotsData = @Html.Raw(Json.Serialize(Model.AvailableSlots));
        console.log("Available Slots Data:", availableSlotsData);

        document.querySelectorAll('.select-date').forEach(function (dateElement) {
            dateElement.addEventListener('click', function () {
                var selectedDate = this.getAttribute('data-date');
                var businessId = this.getAttribute('data-businessid');
                var slots = availableSlotsData[selectedDate] || [];

                console.log("Selected Date:", selectedDate);
                console.log("Retrieved slots for " + selectedDate + ":", slots);

                var model = {
                    BusinessId: businessId,
                    Date: selectedDate,
                    Slots: slots
                };

                console.log("Model to send:", model);
                const fetchUrl = '/UserArea/Appointment/GetSlots';

                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                const token = tokenInput ? tokenInput.value : '';
                if (!token) {
                    console.error('Request verification token is not available.');
                    return;
                }

                fetch(fetchUrl, {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        "RequestVerificationToken": token
                    },
                    body: JSON.stringify(model)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok: ' + response.statusText);
                        }
                        return response.text();
                    })
                    .then(html => {
                        document.getElementById('availableSlots').innerHTML = html;
                    })
                    .catch(error => console.error('Error fetching slots:', error));
            });
        });
    });

    
</script>



